<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ูุฑุงูุจ ุงูุจูุฆุฉ ูุงููุจุงุชุงุช</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
    </style>
</head>
<body class="p-4 sm:p-8 flex flex-col items-center justify-center min-h-screen bg-gray-100">

    <div class="w-full max-w-lg bg-white rounded-xl shadow-2xl p-6 sm:p-8 flex flex-col gap-6">
        <h1 class="text-3xl sm:text-4xl font-bold text-center text-gray-800">ูุฑุงูุจ ุงูุจูุฆุฉ ูุงููุจุงุชุงุช</h1>

        <!-- Search Section -->
        <div class="flex flex-col gap-4">
            <form id="search-form" class="flex flex-col sm:flex-row gap-4">
                <input type="text" id="city-input" placeholder="ุงุฏุฎู ุงุณู ุงููุฏููุฉ" class="flex-1 p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200">
                <button type="submit" class="p-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-all duration-200">ุจุญุซ</button>
            </form>
            <button id="get-location-button" class="p-3 bg-gray-500 text-white font-semibold rounded-lg hover:bg-gray-600 transition-all duration-200">
                ุฌูุจ ุงููููุน ุงูุญุงูู
            </button>
            <div id="loading" class="text-center text-gray-500 hidden">ุฌุงุฑู ุงูุชุญููู...</div>
            <div id="error-message" class="text-center text-red-500 hidden"></div>
        </div>

        <!-- Weather & Air Quality Display -->
        <div id="weather-card" class="bg-blue-50 border-t-4 border-blue-600 rounded-xl shadow-lg p-6 flex flex-col gap-4 hidden">
            <h2 class="text-2xl font-bold text-gray-800" id="location-name"></h2>
            
            <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl" id="temp-icon">โ๏ธ</span>
                    <span class="text-xl font-bold mt-2" id="temp-value"></span>
                    <span class="text-gray-500 text-sm">ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ</span>
                </div>
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl">๐ง</span>
                    <span class="text-xl font-bold mt-2" id="humidity-value"></span>
                    <span class="text-gray-500 text-sm">ุงูุฑุทูุจุฉ</span>
                </div>
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl">๐จ</span>
                    <span class="text-xl font-bold mt-2" id="wind-value"></span>
                    <span class="text-gray-500 text-sm">ุงูุฑูุงุญ</span>
                </div>
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl" id="rain-icon">๐ง๏ธ</span>
                    <span class="text-xl font-bold mt-2" id="rain-value"></span>
                    <span class="text-gray-500 text-sm">ุงูุฃูุทุงุฑ</span>
                </div>
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl">๐ฌ๏ธ</span>
                    <span class="text-xl font-bold mt-2" id="air-quality-value"></span>
                    <span class="text-gray-500 text-sm">ุฌูุฏุฉ ุงูููุงุก (PM2.5)</span>
                </div>
                <div class="flex flex-col items-center p-3 bg-white rounded-lg shadow-md">
                    <span class="text-4xl">โ๏ธ</span>
                    <span class="text-xl font-bold mt-2" id="uv-index-value"></span>
                    <span class="text-gray-500 text-sm">ูุคุดุฑ ุงูุฃุดุนุฉ ููู ุงูุจููุณุฌูุฉ</span>
                </div>
            </div>
            
            <!-- Gemini AI Button -->
            <button id="gemini-button" class="p-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition-all duration-200 flex items-center justify-center gap-2">
                ุชุญููู ุฃูุฑุงุถ ุงููุจุงุชุงุช ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู โจ
            </button>
            <button id="play-analysis-button" class="p-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 transition-all duration-200 flex items-center justify-center gap-2 hidden">
                ุชุดุบูู ุงูุชุญููู ุงูุตูุชู โจ
            </button>
        </div>

        <!-- Plant Disease Prediction Section -->
        <div id="plant-prediction-card" class="bg-green-50 border-t-4 border-green-600 rounded-xl shadow-lg p-6 flex flex-col gap-4 hidden">
            <h2 class="text-2xl font-bold text-gray-800">ุชููุนุงุช ุงูุฃูุฑุงุถ ุงููุจุงุชูุฉ</h2>
            <div id="disease-prediction-content" class="text-gray-700"></div>
        </div>

        <!-- Seasonal Diseases Section -->
        <div id="seasonal-diseases-card" class="bg-purple-50 border-t-4 border-purple-600 rounded-xl shadow-lg p-6 flex flex-col gap-4 hidden">
            <h2 class="text-2xl font-bold text-gray-800">ุงูุฃูุฑุงุถ ุงูุดุงุฆุนุฉ ุญุณุจ ุงูููุณู</h2>
            <div id="seasonal-diseases-content" class="text-gray-700 flex flex-col gap-4">
                <!-- Content will be generated here -->
            </div>
        </div>

        <!-- New: Plant Search by Name Section -->
        <div id="plant-name-search-card" class="w-full max-w-lg bg-white rounded-xl shadow-2xl p-6 sm:p-8 flex flex-col gap-6 mt-8">
            <h2 class="text-2xl sm:text-3xl font-bold text-center text-gray-800">ุงูุจุญุซ ุนู ูุจุงุช ุจุงูุงุณู</h2>
            <div class="flex flex-col gap-4">
                <input type="text" id="plant-name-input" placeholder="ุงุฏุฎู ุงุณู ุงููุจุงุช" class="p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200">
                <button id="search-plant-button" class="p-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 transition-all duration-200 flex items-center justify-center gap-2">
                    ุจุญุซ ุนู ุงููุจุงุช โจ
                </button>
                <div id="plant-name-loading" class="text-center text-gray-500 hidden">ุฌุงุฑู ุงูุจุญุซ...</div>
                <div id="plant-name-error" class="text-center text-red-500 hidden"></div>
            </div>
        </div>

        <!-- New: Plant Identification Section (from image) -->
        <div id="plant-id-card" class="w-full max-w-lg bg-white rounded-xl shadow-2xl p-6 sm:p-8 flex flex-col gap-6 mt-8">
            <h2 class="text-2xl sm:text-3xl font-bold text-center text-gray-800">ุชุญุฏูุฏ ููุน ุงููุจุงุช ูู ุตูุฑุฉ</h2>
            <div class="flex flex-col gap-4">
                <input type="file" id="plant-image-input" accept="image/*" class="p-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200">
                <button id="identify-plant-button" class="p-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center justify-center gap-2" disabled>
                    ุชุญุฏูุฏ ุงููุจุงุช โจ
                </button>
                <div id="plant-id-loading" class="text-center text-gray-500 hidden">ุฌุงุฑู ุงูุชุญููู...</div>
                <div id="plant-id-error" class="text-center text-red-500 hidden"></div>
            </div>
        </div>

        <!-- Plant Identification Results Section -->
        <div id="plant-id-results-card" class="bg-green-50 border-t-4 border-green-600 rounded-xl shadow-lg p-6 flex flex-col gap-4 hidden">
            <h2 class="text-2xl font-bold text-gray-800" id="plant-name-heading"></h2>
            <p id="plant-description-content" class="text-gray-700"></p>
            <div class="flex flex-col gap-2 mt-4">
                <h3 class="text-xl font-bold text-gray-700">ูุตุงุฆุญ ุงูุฑุนุงูุฉ:</h3>
                <ul id="plant-care-list" class="list-disc pr-5 text-gray-600"></ul>
            </div>
            
            <!-- New: Benefits and Edibility Section -->
            <div class="flex flex-col gap-2 mt-4">
                <h3 class="text-xl font-bold text-gray-700">ุงูููุงุฆุฏ:</h3>
                <p id="plant-benefits-content" class="text-gray-600"></p>
            </div>
            <div class="flex flex-col gap-2 mt-2">
                <h3 class="text-xl font-bold text-gray-700">ุตุงูุญ ููุฃูู:</h3>
                <p id="plant-edibility-content" class="text-gray-600"></p>
            </div>

            <button id="play-plant-advice-button" class="p-3 bg-yellow-500 text-white font-semibold rounded-lg hover:bg-yellow-600 transition-all duration-200 flex items-center justify-center gap-2 hidden">
                ุชุดุบูู ุงููุตูุญุฉ ุงูุตูุชูุฉ โจ
            </button>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const apiKey = 'c8f14ced862144178c642611251309';

            const form = document.getElementById('search-form');
            const cityInput = document.getElementById('city-input');
            const getLocationButton = document.getElementById('get-location-button');
            const loading = document.getElementById('loading');
            const errorElement = document.getElementById('error-message');
            const weatherCard = document.getElementById('weather-card');
            const plantPredictionCard = document.getElementById('plant-prediction-card');
            const seasonalDiseasesCard = document.getElementById('seasonal-diseases-card');
            const geminiButton = document.getElementById('gemini-button');
            const playAnalysisButton = document.getElementById('play-analysis-button');
            
            const plantImageInput = document.getElementById('plant-image-input');
            const identifyPlantButton = document.getElementById('identify-plant-button');
            const plantIdLoading = document.getElementById('plant-id-loading');
            const plantIdError = document.getElementById('plant-id-error');

            const plantNameInput = document.getElementById('plant-name-input');
            const searchPlantButton = document.getElementById('search-plant-button');
            const plantNameLoading = document.getElementById('plant-name-loading');
            const plantNameError = document.getElementById('plant-name-error');

            const plantIdResultsCard = document.getElementById('plant-id-results-card');
            const plantNameHeading = document.getElementById('plant-name-heading');
            const plantDescriptionContent = document.getElementById('plant-description-content');
            const plantCareList = document.getElementById('plant-care-list');
            const playPlantAdviceButton = document.getElementById('play-plant-advice-button');
            // New elements for benefits and edibility
            const plantBenefitsContent = document.getElementById('plant-benefits-content');
            const plantEdibilityContent = document.getElementById('plant-edibility-content');

            const locationName = document.getElementById('location-name');
            const tempValue = document.getElementById('temp-value');
            const tempIcon = document.getElementById('temp-icon');
            const humidityValue = document.getElementById('humidity-value');
            const windValue = document.getElementById('wind-value');
            const rainValue = document.getElementById('rain-value');
            const rainIcon = document.getElementById('rain-icon');
            const airQualityValue = document.getElementById('air-quality-value');
            const uvIndexValue = document.getElementById('uv-index-value');
            const diseasePredictionContent = document.getElementById('disease-prediction-content');
            const seasonalDiseasesContent = document.getElementById('seasonal-diseases-content');

            let currentWeatherData = null;
            let currentAnalysisText = "";

            // Utility function to convert Base64 to ArrayBuffer for audio playback
            function base64ToArrayBuffer(base64) {
                const binary_string = window.atob(base64);
                const len = binary_string.length;
                const bytes = new Uint8Array(len);
                for (let i = 0; i < len; i++) {
                    bytes[i] = binary_string.charCodeAt(i);
                }
                return bytes.buffer;
            }

            // Utility function to convert PCM to WAV format
            function pcmToWav(pcmData, sampleRate) {
                const buffer = new ArrayBuffer(44 + pcmData.length * 2);
                const view = new DataView(buffer);
                
                // Write WAV header
                writeString(view, 0, 'RIFF');
                view.setUint32(4, 36 + pcmData.length * 2, true);
                writeString(view, 8, 'WAVE');
                writeString(view, 12, 'fmt ');
                view.setUint32(16, 16, true);
                view.setUint16(20, 1, true); // PCM format
                view.setUint16(22, 1, true); // Mono
                view.setUint32(24, sampleRate, true);
                view.setUint32(28, sampleRate * 2, true); // Byte rate
                view.setUint16(32, 2, true); // Block align
                view.setUint16(34, 16, true); // Bits per sample
                writeString(view, 36, 'data');
                view.setUint32(40, pcmData.length * 2, true);

                // Write PCM data
                let offset = 44;
                for (let i = 0; i < pcmData.length; i++) {
                    view.setInt16(offset, pcmData[i], true);
                    offset += 2;
                }
                
                return new Blob([view], { type: 'audio/wav' });
            }

            function writeString(view, offset, string) {
                for (let i = 0; i < string.length; i++) {
                    view.setUint8(offset + i, string.charCodeAt(i));
                }
            }
            
            // Function to handle fetching data from WeatherAPI
            async function fetchData(query) {
                loading.classList.remove('hidden');
                errorElement.classList.add('hidden');
                weatherCard.classList.add('hidden');
                plantPredictionCard.classList.add('hidden');
                seasonalDiseasesCard.classList.add('hidden');
                geminiButton.disabled = true;
                playAnalysisButton.classList.add('hidden');

                try {
                    const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${query}&aqi=yes`);
                    const data = await response.json();

                    if (data.error) {
                        throw new Error(data.error.message);
                    }

                    currentWeatherData = data;
                    updateWeatherUI(data);
                    geminiButton.disabled = false;
                    
                } catch (error) {
                    console.error('Fetch error:', error);
                    errorElement.textContent = `ุญุฏุซ ุฎุทุฃ: ${error.message}`;
                    errorElement.classList.remove('hidden');
                } finally {
                    loading.classList.add('hidden');
                }
            }

            // Function to handle form submission
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                const city = cityInput.value.trim();
                if (city === '') {
                    errorElement.textContent = 'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณู ูุฏููุฉ.';
                    errorElement.classList.remove('hidden');
                    return;
                }
                fetchData(city);
            });

            // Function to get current location
            getLocationButton.addEventListener('click', () => {
                if (navigator.geolocation) {
                    loading.classList.remove('hidden');
                    errorElement.classList.add('hidden');
                    navigator.geolocation.getCurrentPosition(
                        (position) => {
                            const lat = position.coords.latitude;
                            const lon = position.coords.longitude;
                            fetchData(`${lat},${lon}`);
                        },
                        (error) => {
                            console.error('Geolocation error:', error);
                            loading.classList.add('hidden');
                            switch(error.code) {
                                case error.PERMISSION_DENIED:
                                    errorElement.textContent = 'ููุฏ ุฑูุถุช ูุดุงุฑูุฉ ูููุนู. ุงูุฑุฌุงุก ุงูุณูุงุญ ุจุงููุตูู ุฅูู ุงููููุน ุฃู ุฃุฏุฎู ุงุณู ุงููุฏููุฉ ูุฏููุงู.';
                                    break;
                                case error.POSITION_UNAVAILABLE:
                                    errorElement.textContent = 'ุชุนุฐุฑ ุชุญุฏูุฏ ูููุนู ุงูุญุงูู. ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงุชุตุงูู ุจุงูุฅูุชุฑูุช ูุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.';
                                    break;
                                case error.TIMEOUT:
                                    errorElement.textContent = 'ุงูุชูุช ูููุฉ ุทูุจ ุชุญุฏูุฏ ุงููููุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.';
                                    break;
                                default:
                                    errorElement.textContent = `ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุนุฑูู: ${error.message || 'ุบูุฑ ูุญุฏุฏ'}`;
                                    break;
                            }
                            errorElement.classList.remove('hidden');
                        }
                    );
                } else {
                    errorElement.textContent = 'ุงููุชุตูุญ ูุง ูุฏุนู ุชุญุฏูุฏ ุงููููุน.';
                    errorElement.classList.remove('hidden');
                }
            });

            // Function to generate plant disease advice using Gemini
            geminiButton.addEventListener('click', async () => {
                if (!currentWeatherData) {
                    errorElement.textContent = 'ุงูุฑุฌุงุก ุงูุจุญุซ ุนู ูุฏููุฉ ุฃููุงู.';
                    errorElement.classList.remove('hidden');
                    return;
                }

                geminiButton.textContent = 'ุฌุงุฑู ุงูุชุญููู...';
                geminiButton.disabled = true;
                playAnalysisButton.classList.add('hidden');
                diseasePredictionContent.innerHTML = '';
                seasonalDiseasesContent.innerHTML = '';
                plantPredictionCard.classList.add('hidden');
                seasonalDiseasesCard.classList.add('hidden');

                try {
                    await generatePlantAdviceWithGemini(currentWeatherData);
                } catch (error) {
                    console.error('Gemini API error:', error);
                    diseasePredictionContent.innerHTML = '<span class="text-red-500">ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญููู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.</span>';
                    plantPredictionCard.classList.remove('hidden');
                } finally {
                    geminiButton.textContent = 'ุชุญููู ุฃูุฑุงุถ ุงููุจุงุชุงุช ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู โจ';
                    geminiButton.disabled = false;
                }
            });

            // Function to play the weather analysis using Gemini TTS
            playAnalysisButton.addEventListener('click', async () => {
                if (!currentAnalysisText) {
                    return;
                }

                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                
                playAnalysisButton.textContent = 'ุฌุงุฑู ุงูุชุดุบูู...';
                playAnalysisButton.disabled = true;

                try {
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=`;
                    const payload = {
                        contents: [{ parts: [{ text: currentAnalysisText }] }],
                        generationConfig: {
                            responseModalities: ["AUDIO"],
                            speechConfig: {
                                voiceConfig: {
                                    prebuiltVoiceConfig: { voiceName: "Rasalgethi" }
                                }
                            }
                        },
                        model: "gemini-2.5-flash-preview-tts"
                    };

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error.message);
                    }

                    const result = await response.json();
                    const audioPart = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = audioPart?.inlineData?.data;
                    const mimeType = audioPart?.inlineData?.mimeType;

                    if (audioData && mimeType && mimeType.startsWith("audio/")) {
                        const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
                        const pcmData = base64ToArrayBuffer(audioData);
                        const pcm16 = new Int16Array(pcmData);
                        const wavBlob = pcmToWav(pcm16, sampleRate);
                        const audioUrl = URL.createObjectURL(wavBlob);
                        
                        const audio = new Audio(audioUrl);
                        audio.play();

                        audio.onended = () => {
                             playAnalysisButton.textContent = 'ุชุดุบูู ุงูุชุญููู ุงูุตูุชู โจ';
                             playAnalysisButton.disabled = false;
                        };

                    } else {
                        throw new Error('Invalid audio data received');
                    }

                } catch (error) {
                    console.error('TTS API Error:', error);
                    playAnalysisButton.textContent = 'ุฎุทุฃ ูู ุงูุตูุช';
                } finally {
                    playAnalysisButton.disabled = false;
                }
            });

            // Handle image input for plant identification
            plantImageInput.addEventListener('change', () => {
                if (plantImageInput.files.length > 0) {
                    identifyPlantButton.disabled = false;
                    plantIdError.classList.add('hidden');
                } else {
                    identifyPlantButton.disabled = true;
                }
            });

            // Function to identify plant from an image using Gemini
            identifyPlantButton.addEventListener('click', async () => {
                const file = plantImageInput.files[0];
                if (!file) {
                    plantIdError.textContent = 'ุงูุฑุฌุงุก ุงุฎุชูุงุฑ ุตูุฑุฉ ูุจุงุช.';
                    plantIdError.classList.remove('hidden');
                    return;
                }

                plantIdLoading.classList.remove('hidden');
                identifyPlantButton.disabled = true;
                plantIdResultsCard.classList.add('hidden');
                plantIdError.classList.add('hidden');
                playPlantAdviceButton.classList.add('hidden');

                const reader = new FileReader();
                reader.onload = async (event) => {
                    const base64Image = event.target.result.split(',')[1];
                    try {
                        await identifyPlantWithGemini(base64Image);
                    } catch (error) {
                        console.error('Plant ID error:', error);
                        plantIdError.textContent = 'ุญุฏุซ ุฎุทุฃ ูู ุชุญุฏูุฏ ุงููุจุงุช. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.';
                        plantIdError.classList.remove('hidden');
                        plantIdResultsCard.classList.add('hidden');
                    } finally {
                        plantIdLoading.classList.add('hidden');
                        identifyPlantButton.disabled = false;
                    }
                };
                reader.readAsDataURL(file);
            });
            
            // Function to search for a plant by name using Gemini
            searchPlantButton.addEventListener('click', async () => {
                const plantName = plantNameInput.value.trim();
                if (!plantName) {
                    plantNameError.textContent = 'ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณู ุงููุจุงุช.';
                    plantNameError.classList.remove('hidden');
                    return;
                }

                plantNameLoading.classList.remove('hidden');
                searchPlantButton.disabled = true;
                plantIdResultsCard.classList.add('hidden');
                plantNameError.classList.add('hidden');
                playPlantAdviceButton.classList.add('hidden');

                try {
                    await searchPlantByNameWithGemini(plantName);
                } catch (error) {
                    console.error('Plant search error:', error);
                    plantNameError.textContent = 'ุญุฏุซ ุฎุทุฃ ูู ุงูุจุญุซ ุนู ุงููุจุงุช. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.';
                    plantNameError.classList.remove('hidden');
                    plantIdResultsCard.classList.add('hidden');
                } finally {
                    plantNameLoading.classList.add('hidden');
                    searchPlantButton.disabled = false;
                }
            });

            // Function to play the plant advice audio using Gemini TTS
            playPlantAdviceButton.addEventListener('click', async () => {
                const adviceText = plantDescriptionContent.textContent + ' ' + Array.from(plantCareList.children).map(li => li.textContent).join('ุ ') + '. ุงูููุงุฆุฏ: ' + plantBenefitsContent.textContent + '. ุตุงูุญ ููุฃูู: ' + plantEdibilityContent.textContent + '.';
                if (!adviceText) {
                    return;
                }

                const audioContext = new (window.AudioContext || window.webkitAudioContext)();

                playPlantAdviceButton.textContent = 'ุฌุงุฑู ุงูุชุดุบูู...';
                playPlantAdviceButton.disabled = true;
                
                try {
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=`;
                    const payload = {
                        contents: [{ parts: [{ text: adviceText }] }],
                        generationConfig: {
                            responseModalities: ["AUDIO"],
                            speechConfig: {
                                voiceConfig: {
                                    prebuiltVoiceConfig: { voiceName: "Rasalgethi" }
                                }
                            }
                        },
                        model: "gemini-2.5-flash-preview-tts"
                    };

                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error.message);
                    }

                    const result = await response.json();
                    const audioPart = result?.candidates?.[0]?.content?.parts?.[0];
                    const audioData = audioPart?.inlineData?.data;
                    const mimeType = audioPart?.inlineData?.mimeType;

                    if (audioData && mimeType && mimeType.startsWith("audio/")) {
                        const sampleRate = parseInt(mimeType.match(/rate=(\d+)/)[1], 10);
                        const pcmData = base64ToArrayBuffer(audioData);
                        const pcm16 = new Int16Array(pcmData);
                        const wavBlob = pcmToWav(pcm16, sampleRate);
                        const audioUrl = URL.createObjectURL(wavBlob);
                        
                        const audio = new Audio(audioUrl);
                        audio.play();

                        audio.onended = () => {
                             playPlantAdviceButton.textContent = 'ุชุดุบูู ุงููุตูุญุฉ ุงูุตูุชูุฉ โจ';
                             playPlantAdviceButton.disabled = false;
                        };

                    } else {
                        throw new Error('Invalid audio data received');
                    }

                } catch (error) {
                    console.error('TTS API Error:', error);
                    playPlantAdviceButton.textContent = 'ุฎุทุฃ ูู ุงูุตูุช';
                } finally {
                    playPlantAdviceButton.disabled = false;
                }
            });

            function updateWeatherUI(data) {
                locationName.textContent = data.location.name;
                tempValue.textContent = `${Math.round(data.current.temp_c)}ยฐC`;
                humidityValue.textContent = `${data.current.humidity}%`;
                windValue.textContent = `${data.current.wind_kph} ูู/ุณ`;
                
                if (data.current.temp_c > 30) {
                    tempIcon.textContent = '๐ฅต';
                } else if (data.current.temp_c < 10) {
                    tempIcon.textContent = '๐ฅถ';
                } else {
                    tempIcon.textContent = 'โ๏ธ';
                }

                const isRaining = data.current.condition.text.includes('ูุทุฑ') || data.current.condition.text.includes('Rain');
                if (isRaining) {
                    rainValue.textContent = 'ูุทุฑ';
                    rainIcon.textContent = '๐ง๏ธ';
                } else {
                    rainValue.textContent = 'ูุง ููุฌุฏ';
                    rainIcon.textContent = 'โ๏ธ';
                }
                
                const pm25 = data.current.air_quality.pm2_5;
                airQualityValue.textContent = `${pm25.toFixed(2)} ูููุฑูุบุฑุงู/ูุชุฑ ููุนุจ`;
                
                uvIndexValue.textContent = data.current.uv;
                weatherCard.classList.remove('hidden');
            }

            async function generatePlantAdviceWithGemini(data) {
                const city = data.location.name;
                const humidity = data.current.humidity;
                const rainStatus = data.current.condition.text.includes('ูุทุฑ') || data.current.condition.text.includes('Rain') ? 'ููุฌุฏ ุฃูุทุงุฑ' : 'ูุง ููุฌุฏ ุฃูุทุงุฑ';
                const temp = data.current.temp_c;
                const pm25 = data.current.air_quality.pm2_5;
                const uvIndex = data.current.uv;

                const systemPrompt = "ุชุตุฑูู ูุฎุจูุฑ ุนุงููู ูู ุฃูุฑุงุถ ุงููุจุงุชุงุช ููุณุชุดุงุฑ ุฒุฑุงุนู. ุจูุงุกู ุนูู ุงูุจูุงูุงุช ุงูุจูุฆูุฉ ูุงููููุน ุงูุฐู ุณูุชู ุชูููุฑููุงุ ูุฏู ุชุญูููุงู ููุตูุงู ูููุฎุงุทุฑ ุงููุญุชููุฉ ุนูู ุตุญุฉ ุงููุจุงุชุงุช ูุงูุชุฑุญ ุฅุฌุฑุงุกุงุช ููุงุฆูุฉ ูุญุฏุฏุฉ. ุจุงูุฅุถุงูุฉ ุฅูู ุฐููุ ูู ุจุฅุฏุฑุงุฌ ูุงุฆูุฉ ุจุฃูุซุฑ ุงูุฃูุฑุงุถ ุงููุจุงุชูุฉ ุดููุนุงู ูู ูุฐุง ุงููููุนุ ูุน ุชุตููููุง ุญุณุจ ูุตูู ุงูุณูุฉ (ุงูุดุชุงุกุ ุงูุฑุจูุนุ ุงูุตููุ ุงูุฎุฑูู). ูุฌุจ ุฃู ุชููู ุงูุงุณุชุฌุงุจุฉ ุจุตูุบุฉ JSON.";

                const userQuery = `ุงูุจูุงูุงุช: ุงููุฏููุฉ: ${city}, ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ: ${temp}ยฐC, ุงูุฑุทูุจุฉ: ${humidity}%, ุญุงูุฉ ุงูุฃูุทุงุฑ: ${rainStatus}, ุฌูุฏุฉ ุงูููุงุก (PM2.5): ${pm25.toFixed(2)} ูููุฑูุบุฑุงู/ูุชุฑ ููุนุจ, ูุคุดุฑ ุงูุฃุดุนุฉ ููู ุงูุจููุณุฌูุฉ: ${uvIndex}. ูุฌุจ ุฃู ุชุชุถูู ูุงุฆูุฉ ุงูุฃูุฑุงุถ ููู ูุตู ูู ููู JSONุ ูุน ุงูููุงุชูุญ 'winter', 'spring', 'summer', 'autumn' ูููููุง ูููุงุฆู ูู ุงูุฃูุฑุงุถ.`;

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
                const payload = {
                    contents: [{ parts: [{ text: userQuery }] }],
                    systemInstruction: { parts: [{ text: systemPrompt }] },
                    generationConfig: {
                      responseMimeType: "application/json",
                      responseSchema: {
                          "type": "OBJECT",
                          "properties": {
                              "analysis": { "type": "STRING" },
                              "seasonalDiseases": {
                                  "type": "OBJECT",
                                  "properties": {
                                      "winter": { "type": "ARRAY", "items": { "type": "STRING" } },
                                      "spring": { "type": "ARRAY", "items": { "type": "STRING" } },
                                      "summer": { "type": "ARRAY", "items": { "type": "STRING" } },
                                      "autumn": { "type": "ARRAY", "items": { "type": "STRING" } }
                                  }
                              }
                          },
                          "required": ["analysis", "seasonalDiseases"]
                      }
                    }
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error.message);
                }

                const result = await response.json();
                const jsonText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                const dataFromGemini = JSON.parse(jsonText);

                if (dataFromGemini) {
                    // Store the analysis text for TTS
                    currentAnalysisText = dataFromGemini.analysis + ' ' + JSON.stringify(dataFromGemini.seasonalDiseases);
                    
                    // Update the prediction section
                    diseasePredictionContent.innerHTML = `<h3>ุชุญููู ุฎุจูุฑ:</h3><p>${dataFromGemini.analysis.replace(/\n/g, '</p><p>')}</p>`;
                    plantPredictionCard.classList.remove('hidden');

                    // Update the seasonal diseases section
                    const seasonalData = dataFromGemini.seasonalDiseases;
                    let seasonalHTML = '';

                    const seasonNames = {
                        winter: 'ุงูุดุชุงุก',
                        spring: 'ุงูุฑุจูุน',
                        summer: 'ุงูุตูู',
                        autumn: 'ุงูุฎุฑูู'
                    };

                    for (const seasonKey in seasonalData) {
                        if (seasonalData.hasOwnProperty(seasonKey)) {
                            const diseases = seasonalData[seasonKey];
                            seasonalHTML += `
                                <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                                    <h4 class="text-lg font-bold text-gray-700">${seasonNames[seasonKey]}</h4>
                                    <ul class="list-disc pr-5 mt-2 text-sm text-gray-600">
                                        ${diseases.map(disease => `<li>${disease}</li>`).join('')}
                                    </ul>
                                </div>
                            `;
                        }
                    }
                    seasonalDiseasesContent.innerHTML = seasonalHTML;
                    seasonalDiseasesCard.classList.remove('hidden');
                    playAnalysisButton.classList.remove('hidden');
                } else {
                    diseasePredictionContent.innerHTML = 'ุชุนุฐุฑ ุงูุญุตูู ุนูู ุชุญููู ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู.';
                    plantPredictionCard.classList.remove('hidden');
                }
            }
            
            async function searchPlantByNameWithGemini(plantName) {
                const systemPrompt = "ุชุตุฑูู ูุฎุจูุฑ ูุจุงุชุงุช. ุจูุงุกู ุนูู ุงุณู ุงููุจุงุช ุงูุฐู ุณูุชู ุชูููุฑูุ ูู ุจุชูุฏูู ูุตู ููุฌุฒ ููุ ุซู ูุตุงุฆุญ ูุญุฏุฏุฉ ูุฑุนุงูุชู ุชุชุถูู ูููุฉ ุงูุถูุกุ ูููุฉ ุงููุงุกุ ูุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุงููุซุงููุฉ. ุจุงูุฅุถุงูุฉ ุฅูู ุฐููุ ุงุฐูุฑ ุงูููุงุฆุฏ ุงูุนุงูุฉ ูููุจุงุช ูุญุฏุฏ ูุง ุฅุฐุง ูุงู ุตุงูุญูุง ููุฃูู ุฃู ุบูุฑ ุตุงูุญ ููุฃูู. ูุฌุจ ุฃู ุชููู ุงูุงุณุชุฌุงุจุฉ ุจุตูุบุฉ JSON.";
                const userQuery = `ุงุจุญุซ ุนู ูุนูููุงุช ุญูู ุงููุจุงุช ุงููุณูู: ${plantName}`;

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
                const payload = {
                    contents: [{ parts: [{ text: userQuery }] }],
                    systemInstruction: { parts: [{ text: systemPrompt }] },
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            "type": "OBJECT",
                            "properties": {
                                "name": { "type": "STRING" },
                                "description": { "type": "STRING" },
                                "careTips": {
                                    "type": "OBJECT",
                                    "properties": {
                                        "light": { "type": "STRING" },
                                        "water": { "type": "STRING" },
                                        "temperature": { "type": "STRING" }
                                    }
                                },
                                "benefits": { "type": "STRING" },
                                "isEdible": { "type": "STRING" }
                            }
                        }
                    }
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error.message);
                }

                const result = await response.json();
                const jsonText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                const dataFromGemini = JSON.parse(jsonText);
                
                updatePlantResultsUI(dataFromGemini);
            }


            async function identifyPlantWithGemini(base64Image) {
                const systemPrompt = "ุชุตุฑูู ูุฎุจูุฑ ูุจุงุชุงุช. ุจูุงุกู ุนูู ุงูุตูุฑุฉุ ูู ุจุชุญุฏูุฏ ููุน ุงููุจุงุชุ ููุฏู ูุตูุงู ููุฌุฒุงู ููุ ุซู ูุฏู ูุตุงุฆุญ ูุญุฏุฏุฉ ูุฑุนุงูุชู ุชุชุถูู ูููุฉ ุงูุถูุกุ ูููุฉ ุงููุงุกุ ูุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ ุงููุซุงููุฉ. ุจุงูุฅุถุงูุฉ ุฅูู ุฐููุ ุงุฐูุฑ ุงูููุงุฆุฏ ุงูุนุงูุฉ ูููุจุงุช ูุญุฏุฏ ูุง ุฅุฐุง ูุงู ุตุงูุญูุง ููุฃูู ุฃู ุบูุฑ ุตุงูุญ ููุฃูู. ูุฌุจ ุฃู ุชููู ุงูุงุณุชุฌุงุจุฉ ุจุตูุบุฉ JSON.";
                const userQuery = "ูุง ูู ูุฐุง ุงููุจุงุชุ";

                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=`;
                const payload = {
                    contents: [{
                        parts: [
                            { text: userQuery },
                            {
                                inlineData: {
                                    mimeType: "image/png",
                                    data: base64Image
                                }
                            }
                        ]
                    }],
                    systemInstruction: { parts: [{ text: systemPrompt }] },
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            "type": "OBJECT",
                            "properties": {
                                "name": { "type": "STRING" },
                                "description": { "type": "STRING" },
                                "careTips": {
                                    "type": "OBJECT",
                                    "properties": {
                                        "light": { "type": "STRING" },
                                        "water": { "type": "STRING" },
                                        "temperature": { "type": "STRING" }
                                    }
                                },
                                "benefits": { "type": "STRING" },
                                "isEdible": { "type": "STRING" }
                            }
                        }
                    }
                };

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error.message);
                }

                const result = await response.json();
                const jsonText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                const dataFromGemini = JSON.parse(jsonText);
                
                updatePlantResultsUI(dataFromGemini);
            }
            
            function updatePlantResultsUI(dataFromGemini) {
                if (dataFromGemini && dataFromGemini.name) {
                    plantNameHeading.textContent = dataFromGemini.name;
                    plantDescriptionContent.textContent = dataFromGemini.description;

                    const careTips = dataFromGemini.careTips;
                    plantCareList.innerHTML = '';
                    if (careTips.light) {
                        const li = document.createElement('li');
                        li.textContent = `ุงูุถูุก: ${careTips.light}`;
                        plantCareList.appendChild(li);
                    }
                    if (careTips.water) {
                        const li = document.createElement('li');
                        li.textContent = `ุงููุงุก: ${careTips.water}`;
                        plantCareList.appendChild(li);
                    }
                    if (careTips.temperature) {
                        const li = document.createElement('li');
                        li.textContent = `ุฏุฑุฌุฉ ุงูุญุฑุงุฑุฉ: ${careTips.temperature}`;
                        plantCareList.appendChild(li);
                    }
                    
                    // Update new benefits and edibility sections
                    plantBenefitsContent.textContent = dataFromGemini.benefits || "ูุง ุชูุฌุฏ ูุนูููุงุช ูุชููุฑุฉ.";
                    plantEdibilityContent.textContent = dataFromGemini.isEdible || "ูุง ุชูุฌุฏ ูุนูููุงุช ูุชููุฑุฉ.";

                    plantIdResultsCard.classList.remove('hidden');
                    playPlantAdviceButton.classList.remove('hidden');
                } else {
                    plantIdError.textContent = 'ุชุนุฐุฑ ุชุญุฏูุฏ ุงููุจุงุช. ุงูุฑุฌุงุก ุงููุญุงููุฉ ุจุตูุฑุฉ ุฃูุถุญ.';
                    plantIdError.classList.remove('hidden');
                }
            }
        });
    </script>

</body>
</html>
